# Copyright 2021-2023 VMware, Inc.
# SPDX-License-Identifier: Apache-2.0

.control_service_retry:
  retry_options:
    max: 1
    when:
      - always

.images:dind:
  image: docker:23.0.1
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:23.0.1-dind

# This grouping listens on changes to all code of control service
# Changes to this group should trigger runs of runs of unit and integration tests.
.control_service_code_changes: &control_service_code_change_locations
  - projects/control-service/cicd/**/*
  - projects/control-service/projects/base/**/*
  - projects/control-service/projects/model/**/*
  - projects/control-service/projects/pipelines_control_service/**/*
  - projects/control-service/projects/settings.gradle
  - projects/control-service/projects/versions-of-external-dependencies.gradle

# This grouping represents tracks changes in the helm chart
# Changes here should trigger actions like publishing images, new releases etc.
# but don't trigger unit or integration tests (without code changes)
.control_service_helm_changes: &control_service_helm_change_locations
  - projects/control-service/projects/helm_charts/pipelines-control-service/**/*

.control_service_base_build:
  image: docker:23.0.1
  variables:
    _JAVA_OPTIONS: "-Xms2048m -Xmx4096m"
  before_script:
    - apk --no-cache add openjdk17-jdk git zip curl zip py-pip
    - pip install --upgrade pip && pip install awscli

control_service_build_image:
  extends:
    - .control_service_base_build
    - .images:dind
  stage: build
  script:
    - apk --no-cache add git openjdk17-jdk
    - export TAG=$(git rev-parse --short HEAD)
    - cd projects/control-service/projects
    - ./gradlew -p ./model build publishToMavenLocal --info --stacktrace
    - ./gradlew build jacocoTestReport -x integrationTest --info --stacktrace
    - ./gradlew :pipelines_control_service:docker --info --stacktrace -Pversion=$TAG
  retry: !reference [.control_service_retry, retry_options]
  coverage: "/    - Line Coverage: ([0-9.]+)%/"
  artifacts:
    when: always
    paths:
      - ./projects/control-service/projects/*/build/reports/**
    expire_in: 1 week
    reports:
      junit: ./projects/control-service/projects/**/build/test-results/test/TEST-*.xml
  only:
    refs:
      - external_pull_requests
    changes: *control_service_code_change_locations

control_service_integration_test:
  extends: .control_service_base_build
  stage: build
  variables:
    DEPLOYMENT_K8S_KUBECONFIG: "~/.kube/config"
    DEPLOYMENT_K8S_NAMESPACE: $CICD_KUBERNETES_NAMESPACE
    CONTROL_K8S_KUBECONFIG: "~/.kube/config"
    CONTROL_K8S_NAMESPACE: $CICD_KUBERNETES_NAMESPACE
    DOCKER_REGISTRY_URL: $CICD_CONTAINER_REGISTRY_URI
    DOCKER_REGISTRY_USERNAME: $CICD_CONTAINER_REGISTRY_USER_NAME
    DOCKER_REGISTRY_PASSWORD: $CICD_CONTAINER_REGISTRY_USER_PASSWORD
    GIT_URL: $CICD_GIT_URI
    GIT_USERNAME: $CICD_GIT_USER
    GIT_PASSWORD: $CICD_GIT_PASSWORD
    GIT_USERNAME_READ_WRITE: $CICD_GIT_USER
    GIT_PASSWORD_READ_WRITE: $CICD_GIT_PASSWORD
  script:
    - cd projects/control-service/projects
    - ./gradlew -p ./model build publishToMavenLocal
    - mkdir -p ~/.kube
    - cp $KUBECONFIG ~/.kube/config
    - ./gradlew -v
    - ./gradlew projects --info
    - ./gradlew -Djdk.tls.client.protocols=TLSv1.2 :pipelines_control_service:integrationTest --info --stacktrace
  retry: !reference [.control_service_retry, retry_options]
  artifacts:
    when: always
    paths:
      - ./projects/control-service/projects/*/build/reports/**
    expire_in: 1 week
    reports:
      junit: ./projects/control-service/projects/**/build/test-results/integrationTest/TEST-*.xml
  only:
    refs:
      - external_pull_requests
    changes: *control_service_code_change_locations
  except:
    changes:
      - projects/control-service/projects/helm_charts/pipelines-control-service/version.txt

control_service_test_helm_chart:
  stage: build
  script:
    - export DESIRED_VERSION=v3.11.0 # helm version 3.11.0
    - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    - cd projects/control-service/projects/helm_charts/pipelines-control-service
    - helm dependency update
    - helm lint
  only:
    refs:
      - external_pull_requests
    changes: *control_service_helm_change_locations
  except:
    changes:
      - projects/control-service/projects/helm_charts/pipelines-control-service/version.txt

control_service_publish_job_base_image:
  extends: .images:dind
  stage: publish_artifacts
  script:
    - apk add --no-cache bash
    - docker login --username "${VDK_DOCKER_REGISTRY_USERNAME}" --password "${VDK_DOCKER_REGISTRY_PASSWORD}" "${VDK_DOCKER_REGISTRY_URL}"
    - cd projects/control-service/projects/job-base-image
    - export VERSION_TAG="1.$CI_PIPELINE_ID"
    - bash -ex ./publish-job-base.sh
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - projects/control-service/projects/job-base-image/**/*

control_service_publish_job_base_image-secure:
  extends: .images:dind
  stage: publish_artifacts
  script:
    - apk add --no-cache bash
    - docker login --username "${VDK_DOCKER_REGISTRY_USERNAME}" --password "${VDK_DOCKER_REGISTRY_PASSWORD}" "${VDK_DOCKER_REGISTRY_URL}"
    - cd projects/control-service/projects/job-base-image-secure
    - export VERSION_TAG="1.$CI_PIPELINE_ID"
    # Make the docker-slim tool available to the CI job
    - >
        apk add -u curl
        && curl -L -o ds.tar.gz https://downloads.dockerslim.com/releases/1.37.3/dist_linux.tar.gz
        && tar -xvf ds.tar.gz
        && mv dist_linux/docker-slim /usr/local/bin/
        && mv dist_linux/docker-slim-sensor /usr/local/bin/
    - bash -ex ./publish-job-base.sh
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - projects/control-service/projects/job-base-image-secure/**/*

control_service_publish_job_builder_image:
  extends: .images:dind
  stage: publish_artifacts
  script:
    - apk add --no-cache bash
    - docker login --username "${VDK_DOCKER_REGISTRY_USERNAME}" --password "${VDK_DOCKER_REGISTRY_PASSWORD}" "${VDK_DOCKER_REGISTRY_URL}"
    - cd projects/control-service/projects/job-builder
    - bash -ex ./publish-vdk-job-builder.sh
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - projects/control-service/projects/job-builder/version.txt


control_service_publish_job_builder_secure_image:
  extends: control_service_publish_job_builder_image
  script:
    - apk add --no-cache bash
    - docker login --username "${VDK_DOCKER_REGISTRY_USERNAME}" --password "${VDK_DOCKER_REGISTRY_PASSWORD}" "${VDK_DOCKER_REGISTRY_URL}"
    - cd projects/control-service/projects/job-builder-secure
    - bash -ex ./publish-vdk-job-builder-secure.sh
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - projects/control-service/projects/job-builder-secure/version.txt


control_service_publish_image:
  extends: .images:dind
  stage: publish_artifacts
  script:
    - apk add --no-cache git openjdk17-jdk
    - export TAG=$(git rev-parse --short HEAD)
    - docker login -u $VDK_DOCKER_REGISTRY_USERNAME -p $VDK_DOCKER_REGISTRY_PASSWORD
    - cd projects/control-service/projects
    - ./gradlew -p ./model build publishToMavenLocal --info --stacktrace
    - ./gradlew build -x test --info --stacktrace
    - ./gradlew :pipelines_control_service:dockerPush --info --stacktrace -Pversion=$TAG
  retry: !reference [.control_service_retry, retry_options]
  artifacts:
    when: always
    reports:
      junit: ./projects/control-serviceprojects/**/build/test-results/test/TEST-*.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: [ projects/control-service/projects/helm_charts/pipelines-control-service/version.txt ]
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_code_change_locations
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_helm_change_locations

control_service_publish_api_client:
  image: docker:23.0.1
  stage: publish_artifacts
  script:
    - apk add --no-cache py-pip openjdk17-jdk git python
    - pip install -U pip setuptools wheel twine
    - ./projects/control-service/projects/gradlew -p ./projects/control-service/projects/model buildPython
    - cd projects/control-service/projects/model/apidefs/datajob-api/build
    - rm -rf dist/ && cd ./python
    - python setup.py sdist --formats=gztar
    - twine upload --repository-url $PIP_REPO_UPLOAD_URL -u "$PIP_REPO_UPLOAD_USER_NAME" -p "$PIP_REPO_UPLOAD_USER_PASSWORD" dist/*tar.gz --verbose
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - projects/control-service/projects/model/apidefs/datajob-api/config-python.json

# (there are docker KDC servers that can be used for demo? but it will not work with Impala ?)
# The cockroach storage class is taken from DECC https://devhub.eng.vmware.com/console/resources/namespaces
# Go to the namespace -> StorageClass
control_service_deploy_testing_data_pipelines:
  stage: pre_release
  image: docker:23.0.1
  script:
    - apk --no-cache add bash openssl curl git gettext zip py-pip
    - pip install --upgrade pip && pip install awscli
    - export DESIRED_VERSION=v3.11.0 # helm version 3.11.0
    - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    - bash -ex ./projects/control-service/cicd/deploy-testing-pipelines-service.sh
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: [ projects/control-service/projects/helm_charts/pipelines-control-service/version.txt ]
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_code_change_locations
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_helm_change_locations

# vdk-heartbeat source: https://github.com/vmware/versatile-data-kit/tree/main/projects/vdk-heartbeat
control_service_post_deployment_test:
  stage: pre_release_test
  image: python:3.7
  script:
    - set -x
    - pip install quickstart-vdk
    - pip install vdk-heartbeat[trino]
    - vdk version
    - export VDKCLI_OAUTH2_REFRESH_TOKEN=$VDK_API_TOKEN
    - export VDK_HEARTBEAT_OP_ID="vdkcs-$CI_PIPELINE_ID"
    - vdk-heartbeat -f projects/control-service/cicd/post_deploy_test_heartbeat_config.ini
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: [ projects/control-service/projects/helm_charts/pipelines-control-service/version.txt ]
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_code_change_locations
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_helm_change_locations

control_service_release:
  image: docker:23.0.1
  stage: release
  script:
    - apk --no-cache add bash openssl curl git
    - export IMAGE_TAG="$(git rev-parse --short HEAD)"
    - export DESIRED_VERSION=v3.11.0 # helm version 3.11.0
    - export CHART_NAME=pipelines-control-service
    - export CHART_VERSION="$(cat projects/control-service/projects/helm_charts/$CHART_NAME/version.txt | grep -o '^[0-9]\+\.[0-9]\+').$CI_PIPELINE_ID"
    - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    - helm plugin install https://github.com/chartmuseum/helm-push --version 0.10.0
    - helm plugin install https://github.com/thynquest/helm-pack --version 0.2.2
    - cd projects/control-service/projects/helm_charts
    - bash -ex ../../cicd/release-pipelines-service.sh
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_code_change_locations
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_helm_change_locations

# TODO: automatically rebuild image on vdk-heartbeat change
control_service_vdk_heartbeat_release:
  extends: .images:dind
  stage: release
  script:
    - export CHART_NAME=pipelines-control-service
    - export CHART_VERSION=$(cat projects/control-service/projects/helm_charts/$CHART_NAME/version.txt | grep -o '^[0-9]\+\.[0-9]\+').$CI_PIPELINE_ID
    - export VDK_HEARTBEAT_TEST_NAME=$CHART_NAME-integration-tests:$CHART_VERSION
    - export VDK_HEARTBEAT_IMAGE_NAME="$VDK_DOCKER_REGISTRY_URL/$VDK_HEARTBEAT_TEST_NAME"
    - docker login $VDK_DOCKER_REGISTRY_URL --username $VDK_DOCKER_REGISTRY_USERNAME --password $VDK_DOCKER_REGISTRY_PASSWORD
    - cd projects/control-service/cicd
    - docker build --tag $VDK_HEARTBEAT_IMAGE_NAME -f Dockerfile.vdk.heartbeat .
    - docker push $VDK_HEARTBEAT_IMAGE_NAME
  retry: !reference [.control_service_retry, retry_options]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_code_change_locations
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: *control_service_helm_change_locations
