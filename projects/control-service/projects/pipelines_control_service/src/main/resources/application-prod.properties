# File contains default configuration used in production

# Properties in CAPS can be customized with environment variables and typically come from
# a Kubernetes container specification. The defaults are sensible and work in most cases.

# The root with empty password account works for the CockroachDB deployment
# internal to the Kubernetes cluster defined in our main Helm chart.
DB_USERNAME=root
DB_PASSWORD=

AUTHORITIES_CLAIM_NAME=
CUSTOM_CLAIM_NAME=
AUTHORIZED_CUSTOM_CLAIM_VALUES=
AUTHORIZED_ROLES=

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL94Dialect
# This JDBC URL needs the posgresql JDBC driver to be on the classpath
spring.datasource.url=${DB_JDBC_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Specify Max HTTP Header Size as an alternative to the broken SERVER_MAXHTTPHEADERSIZE
server.max-http-header-size=${SERVER_MAX_HTTP_HEADER_SIZE}

# The owner name and email address that will be used to send all Versatile Data Kit related email notifications.
datajobs.notification.owner.email=${NOTIFICATION_OWNER_EMAIL}
datajobs.notification.owner.name=${NOTIFICATION_OWNER_NAME}
datajobs.notification.cc.emails=${NOTIFICATION_CC_EMAILS}

# This is DeploymentService configuration injected through environmental variables
datajobs.deployment.k8s.kubeconfig=${DEPLOYMENT_K8S_KUBECONFIG}
datajobs.deployment.k8s.namespace=${DEPLOYMENT_K8S_NAMESPACE}
datajobs.git.url=${GIT_URL}
datajobs.git.username=${GIT_USERNAME}
datajobs.git.password=${GIT_PASSWORD}
datajobs.aws.region=${AWS_REGION}
datajobs.aws.accessKeyId=${AWS_ACCESS_KEY_ID}
datajobs.aws.secretAccessKey=${AWS_ACCESS_KEY_SECRET}
datajobs.docker.repositoryUrl=${DOCKER_REPOSITORY_URL}
datajobs.vdk.image=${DOCKER_VDK_BASE_IMAGE}
datajobs.docker.registryType=${DOCKER_REGISTRY_TYPE}
datajobs.docker.registryUsername=${DOCKER_REGISTRY_USERNAME}
datajobs.docker.registryPassword=${DOCKER_REGISTRY_PASSWORD}

datajobs.job.resources.requests.memory=${DEFAULT_JOB_RESOURCES_REQUESTS_MEMORY}
datajobs.job.resources.requests.cpu=${DEFAULT_JOB_RESOURCES_REQUESTS_CPU}
datajobs.job.resources.limits.memory=${DEFAULT_JOB_RESOURCES_LIMITS_MEMORY}
datajobs.job.resources.limits.cpu=${DEFAULT_JOB_RESOURCES_LIMITS_CPU}

datajob.builder.cpu.requests=${DEFAULT_BUILDER_RESOURCES_REQUESTS_CPU}
datajob.builder.memory.requests=${DEFAULT_BUILDER_RESOURCES_REQUESTS_MEMORY}
datajob.builder.cpu.limits=${DEFAULT_BUILDER_RESOURCES_LIMITS_CPU}
datajob.builder.memory.limits=${DEFAULT_BUILDER_RESOURCES_LIMITS_MEMORY}

datajobs.kadmin_user=${KADMIN_USER}
datajobs.kadmin_password=${KADMIN_PASSWORD}

# This is the full image name of the data job builder
datajobs.builder.image=registry.hub.docker.com/versatiledatakit/job-builder:1.1
datajobs.deployment.dataJobBaseImage=registry.hub.docker.com/versatiledatakit/data-job-base-python-3.7:latest

# Path to an ini config file that contains vdk runtime options
datajobs.vdk_options_ini=${VDK_OPTIONS_INI}

# Public proxy which is used when pulling data jobs images
datajobs.proxy.repositoryUrl=${PROXY_DOCKER_REPO_URL}

# Access token credentials with read and write access to the repository containing the data jobs
# Different public Git repositories require different approaches for access token as per:
# https://www.codeaffine.com/2014/12/09/jgit-authentication/
datajobs.git.read.write.username=${GIT_USERNAME_READ_WRITE}
datajobs.git.read.write.password=${GIT_PASSWORD_READ_WRITE}


# Security configuration. Note if you enable security, you may
# also enable authentication provider(s) and authorization
# featureflag.security.enabled=true

# Settings for Kerberos authentication provider
datajobs.security.kerberos.enabled=${SECURITY_KERBEROS_ENABLED:false}
# Properties mandatory if datajobs.security.kerberos.enabled=true
datajobs.security.kerberos.kerberosPrincipal=${SECURITY_KERBEROS_SERVICE_PRINCIPAL:""}
datajobs.security.kerberos.keytabFileLocation=${SECURITY_KERBEROS_SERVICE_KEYTAB_FILE_LOCATION:}
datajobs.security.kerberos.krb5ConfigLocation=${SECURITY_KERBEROS_KRB5_CONFIG_LOCATION:}

# Settings for OAuth2 authentication provider
datajobs.security.oauth2.enabled=true

# The JSON Web Key Set (JWKS) is a set of keys which contains the public keys
# used to verify any JSON Web Token (JWT) issued by the authorization server
# It is required.
 spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI:http://localhost}

spring.security.oauth2.resourceserver.jwt.issuer-uri=${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI:http://localhost}

# The CSP Auth Token doesn't contain the user permissions in the default location - the authorities
# field of the JWT token. This property specifies a custom location for the authorities field.
datajobs.authorization.authorities-claim-name=${AUTHORITIES_CLAIM_NAME}

# Name of a claim in the JWT token that needs to be validated.
# An example use case would be to validate if a CSP Organization Id is allowed to access and modify resources.
datajobs.authorization.custom-claim-name=${CUSTOM_CLAIM_NAME}

# A comma separated list of allowed values for the JWT claim specified in "datajobs.authorization.custom-claim-name".
# If the list is empty, the claim is not validated. E.g. list of authorized CSP Organization Ids.
datajobs.authorization.authorized-custom-claim-values=${AUTHORIZED_CUSTOM_CLAIM_VALUES}

# A comma separated list of roles. Users whose tokens contain at least one of the roles
# are allowed to access and modify resources. If the list is empty, roles are not validated.
# E.g. "f399c40d-fb5e-4d24-8041-20b82471c6be/taurus:service-owner,65ecda65-2975-4a9c-b982-ccf52755296d/tpcs:admin"
datajobs.authorization.authorized-roles=${AUTHORIZED_ROLES}

# For other security properties see
# https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#security-properties

# The monitoring sync interval is the time period on which a single instance
# of the control service will scrape the monitoring metrics from a data base
#
# The value is a number in milliseconds
datajobs.monitoring.sync.interval=${DEFAULT_MONITORING_SYNC_INTERVAL}

# The initial delay sync interval is the period between control service start and
# the first time a scrape is done by the control service instance against the data base
#
# The value is a number in milliseconds
datajobs.monitoring.sync.initial.delay=${DEFAULT_MONITORING_INITIAL_DELAY_SYNC_INTERVAL}

# Set extra arguments to be passed on Data Job Builder Kubernetes Job
# Builder is based on kaniko so any arguments accepted by kaniko/executor will be accepted
# For example if working with non-SSL registry you can pass --insecure
#datajobs.deployment.builder.extraArgs=${DATAJOBS_DEPLOYMENT_BUILDER_EXTRAARGS}

# Enables JSON-formatted logging for all logs emitted by the Control Service.
LOGGING_FORMAT=${LOGGING_FORMAT:""}
